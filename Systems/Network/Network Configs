✅ Final Working Setup: Hercules + z/OS + TUN/TAP + Clean Internet
🔧 1. Ensure TUN/TAP is enabled on Linux

ls /dev/net/tun

If it doesn't exist:

sudo mkdir -p /dev/net
sudo mknod /dev/net/tun c 10 200
sudo chmod 666 /dev/net/tun

Check kernel has TUN:

sudo modprobe tun
dmesg | grep tun

🔧 2. Correct your Hercules network config

Edit your config file (e.g., s390.CONF) and make sure you use only this line for LCS:

0E20.2 LCS -n /dev/net/tun

Don't add IPs or use tap0 directly.
🧠 3. Edit your z/OS TCP/IP PROFILE

Use this full config (this is the final, corrected version):

DEVICE LCS1   LCS E20 AUTORESTART
LINK   ETH1   ETHERNET 0 LCS1
HOME   192.168.4.150 ETH1

ROUTE 192.168.4.0    255.255.255.0   =         ETH1   MTU DEFAULTSIZE
ROUTE DEFAULT        192.168.4.250               ETH1   MTU DEFAULTSIZE

START LCS1
ENDRoutes

    .150 = z/OS IP

    .250 = Linux TAP gateway IP (we’ll assign this next)

💻 4. Start Hercules as root

sudo hercules -f /path/to/s390.CONF

You should see:

HHC00901I 0:0E20 LCS: Interface tap0, type TAP opened
*************************************************************************************
*************************************************************************************
****************
make sure in hercules consule you look what type of TAP is opened : 

like 

 CTC: lcs interface tap1 using mac BE:0E:5B:E7:81:0C                
HHC00942I CTC: lcs interface tap1 using mac BE:0E:5B:E7:81:0C                

which is tap 1 so you would set up tap1 :::::

sudo ip link set tap1 up
sudo ip addr del 192.168.4.1/24 dev tap1  # only if previously assigned  <============== dont need this one 
sudo ip addr add 192.168.4.250/24 dev tap1                                <=========== make this your home network network from the machine to the mainframe , do not copy your wifi ip or mainframe ip just use 250 to be safe



ip addr show tap1


ip addr show tap0


📶 7. Test connectivity

From Linux:

ping 192.168.4.150

From z/OS:

PING 192.168.4.250

jtron@jtron-ThinkPad-T480:~$ ip route                   <==============
default via 192.168.4.1 dev wlp3s0 proto dhcp src 192.168.4.109 metric 600 
192.168.4.0/24 dev tap0 proto kernel scope link src 192.168.4.250 
192.168.4.0/22 dev wlp3s0 proto kernel scope link src 192.168.4.109 metric 600 
jtron@jtron-ThinkPad-T480:~$ 



Both directions should work flawlessly.
✅ 8. (Optional) Enable Internet Access for z/OS (if desired)                                     <=================================================== do this one for first for wifi

sudo sysctl -w net.ipv4.ip_forward=1
sudo iptables -t nat -A POSTROUTING -o wlp3s0 -j MASQUERADE

Replace wlp3s0 with your real internet interface (ip route shows this).
🧼 9. (Optional) Disable IP forwarding/NAT if you don’t need internet

sudo iptables -t nat -D POSTROUTING -o wlp3s0 -j MASQUERADE
sudo sysctl -w net.ipv4.ip_forward=0


*********************ping

✅ Step-by-step on Linux:
1. Enable IP forwarding (so Linux can act as a router temporarily):

sudo sysctl -w net.ipv4.ip_forward=1

    🔁 This will reset after reboot unless you make it permanent (optional).

2. Enable NAT for the z/OS subnet (192.168.4.0/24):

First, find your internet-facing interface (likely wlp3s0, eth0, or similar):

ip route | grep default

Look at the interface name at the end (e.g., dev wlp3s0).

Then, run this command (replacing wlp3s0 if needed):

sudo iptables -t nat -A POSTROUTING -s 192.168.4.0/24 -o wlp3s0 -j MASQUERADE

***************************************************

🎉 Done!

You now have:

    Full z/OS ↔ Linux networking via TAP

    Clean, conflict-free IP setup

    No internet slowdown

    Optional z/OS outbound internet (if enabled)



*************to chnage ips


sudo ip addr flush dev tap0
sudo ip addr add 192.168.0.250/24 dev tap0
sudo ip link set dev tap0 up





ping =============


sudo sysctl -w net.ipv4.ip_forward=1


sudo iptables -t nat -A POSTROUTING -o wlp3s0 -s 192.168.4.0/22 -j MASQUERADE
==========================================================================

deactive it --------

sudo sysctl -w net.ipv4.ip_forward=0
sudo iptables -t nat -D POSTROUTING -o wlp3s0 -s 192.168.4.0/22 -j MASQUERADE




🔍 1. Check if IP forwarding is enabled

Run:

cat /proc/sys/net/ipv4/ip_forward

    If it returns 1 → IP forwarding is enabled

    If it returns 0 → IP forwarding is disabled

Alternatively:

sysctl net.ipv4.ip_forward




2. Check if NAT (MASQUERADE) is enabled

To see if the MASQUERADE rule is in place:

sudo iptables -t nat -L POSTROUTING -n -v

Look for a line similar to:

MASQUERADE  all  --  0.0.0.0/0  0.0.0.0/0  /* maybe your interface listed */

    If such a rule exists for your interface (e.g. wlp3s0), then NAT is enabled

    If no such rule exists, NAT is disabled

🧼 To Disable:

You can disable both using:

sudo sysctl -w net.ipv4.ip_forward=0
sudo iptables -t nat -D POSTROUTING -o wlp3s0 -j MASQUERADE

Replace wlp3s0 with your actual internet-facing interface (found via ip route or ip a).

Let me know if you want help identifying your interface or parsing the iptables output.
You said:
jtron@archt480 ~]$ sudo iptables -t nat -L POSTROUTING -n -v
Chain POSTROUTING (policy ACCEPT 418 packets, 27860 bytes)
 pkts bytes target     prot opt in     out     source               destination         
 2655  276K MASQUERADE  all  --  *      wlp3s0  192.168.4.0/24       0.0.0.0/0           
    0     0 MASQUERADE  all  --  *      wlp3s0  192.168.4.0/22       0.0.0.0/0           
    0     0 MASQUERADE  all  --  *      wlp3s0  192.168.4.0/22       0.0.0.0/0           
    0     0 MASQUERADE  all  --  *      wlp3s0  192.168.155.0/24     0.0.0.0/0           
    0     0 MASQUERADE  all  --  *      wlp3s0  192.168.100.0/24     0.0.0.0/0           
[jtron@archt480 ~]$ 
ChatGPT said:

Thanks for sharing the output — here's what it means:
✅ IPTables MASQUERADE (NAT) Status: ENABLED

You currently have multiple MASQUERADE rules in the POSTROUTING chain of the nat table:

2655  276K MASQUERADE  all  --  *  wlp3s0  192.168.4.0/24     0.0.0.0/0

    The first rule shows that 2,655 packets and 276KB have been processed — this is active and in use.







🔹 192.168.4.0/24 (Subnet)

    ✅ Correct for use in iptables to match a range of IPs

    It covers all IPs from 192.168.4.1 to 192.168.4.254

    Typically used in MASQUERADE rules when sharing internet with a local subnet

🔹 192.168.4.1 (Single Host IP)

    ❌ Only matches that specific IP

    Not useful if you're trying to allow many clients on your network to use NAT


If you're still unsure about your exact subnet, you can run:

ip a | grep inet

Look for your internal interface (like wlan0, enpXsY, etc.), and you’ll see something like:

inet 192.168.4.1/24

That /24 is your subnet — so you'd use 192.168.4.0/24 in iptables.

Let me know if you'd like help interpreting your actual IP layout.




Interfaces & Subnets:

    wlp3s0 (your real internet interface):

inet 192.168.4.146/22

This means the subnet is: 192.168.4.0/22
(covers 192.168.4.1 → 192.168.7.254)

tap1 (likely a virtual interface for a VM or VPN):

    inet 192.168.4.250/24

    This is a smaller subnet: 192.168.4.0/24

✅ Correct IP Range for NAT (MASQUERADE)

If you're sharing internet from wlp3s0 to clients behind tap1, you want:

sudo iptables -t nat -A POSTROUTING -o wlp3s0 -s 192.168.4.0/24 -j MASQUERADE

Because:

    tap1 has 192.168.4.250/24, so the traffic will come from 192.168.4.0/24

    You are sending that traffic out through wlp3s0, which is your uplink

❗ Be Careful

If you instead use:

-s 192.168.4.0/22

That will match a broader range, including IPs like 192.168.6.55, which may not be what you want.
✅ Recommendation:

Stick with:

-s 192.168.4.0/24

unless you intentionally want to cover the full /22 range.

Let me know what you're trying to route/NAT exactly (like a VM, container, or subnet), and I can confirm the best rule.

    The rest have 0 packets and bytes, meaning those rules are not being used right now but are still present.
