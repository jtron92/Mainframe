✅ Final Working Setup: Hercules + z/OS + TUN/TAP + Clean Internet
🔧 1. Ensure TUN/TAP is enabled on Linux

ls /dev/net/tun

If it doesn't exist:

sudo mkdir -p /dev/net
sudo mknod /dev/net/tun c 10 200
sudo chmod 666 /dev/net/tun

Check kernel has TUN:

sudo modprobe tun
dmesg | grep tun

🔧 2. Correct your Hercules network config

Edit your config file (e.g., s390.CONF) and make sure you use only this line for LCS:

0E20.2 LCS -n /dev/net/tun

Don't add IPs or use tap0 directly.
🧠 3. Edit your z/OS TCP/IP PROFILE

Use this full config (this is the final, corrected version):

DEVICE LCS1   LCS E20 AUTORESTART
LINK   ETH1   ETHERNET 0 LCS1
HOME   192.168.4.150 ETH1

ROUTE 192.168.4.0    255.255.255.0   =         ETH1   MTU DEFAULTSIZE
ROUTE DEFAULT        192.168.4.250               ETH1   MTU DEFAULTSIZE

START LCS1
ENDRoutes

    .150 = z/OS IP

    .250 = Linux TAP gateway IP (we’ll assign this next)

💻 4. Start Hercules as root

sudo hercules -f /path/to/s390.CONF

You should see:

HHC00901I 0:0E20 LCS: Interface tap0, type TAP opened
*************************************************************************************
*************************************************************************************
****************
make sure in hercules consule you look what type of TAP is opened : 

like 

 CTC: lcs interface tap1 using mac BE:0E:5B:E7:81:0C                
HHC00942I CTC: lcs interface tap1 using mac BE:0E:5B:E7:81:0C                

which is tap 1 so you would set up tap1 :::::

sudo ip link set tap1 up
sudo ip addr del 192.168.4.1/24 dev tap1  # only if previously assigned  <============== dont need this one 
sudo ip addr add 192.168.4.250/24 dev tap1                                <=========== make this your home network ip to your mainframe   ............. sudo ip addr add 192.168.4.155/24 dev tap1 



ip addr show tap1


ip addr show tap0


📶 7. Test connectivity

From Linux:

ping 192.168.4.150

From z/OS:

PING 192.168.4.250

jtron@jtron-ThinkPad-T480:~$ ip route                   <==============
default via 192.168.4.1 dev wlp3s0 proto dhcp src 192.168.4.109 metric 600 
192.168.4.0/24 dev tap0 proto kernel scope link src 192.168.4.250 
192.168.4.0/22 dev wlp3s0 proto kernel scope link src 192.168.4.109 metric 600 
jtron@jtron-ThinkPad-T480:~$ 



Both directions should work flawlessly.
✅ 8. (Optional) Enable Internet Access for z/OS (if desired)                                     <=================================================== do this one for first for wifi

sudo sysctl -w net.ipv4.ip_forward=1
sudo iptables -t nat -A POSTROUTING -o wlp3s0 -j MASQUERADE

Replace wlp3s0 with your real internet interface (ip route shows this).
🧼 9. (Optional) Disable IP forwarding/NAT if you don’t need internet

sudo iptables -t nat -D POSTROUTING -o wlp3s0 -j MASQUERADE
sudo sysctl -w net.ipv4.ip_forward=0


*********************ping

✅ Step-by-step on Linux:
1. Enable IP forwarding (so Linux can act as a router temporarily):

sudo sysctl -w net.ipv4.ip_forward=1

    🔁 This will reset after reboot unless you make it permanent (optional).

2. Enable NAT for the z/OS subnet (192.168.4.0/24):

First, find your internet-facing interface (likely wlp3s0, eth0, or similar):

ip route | grep default

Look at the interface name at the end (e.g., dev wlp3s0).

Then, run this command (replacing wlp3s0 if needed):

sudo iptables -t nat -A POSTROUTING -s 192.168.4.0/24 -o wlp3s0 -j MASQUERADE

***************************************************

🎉 Done!

You now have:

    Full z/OS ↔ Linux networking via TAP

    Clean, conflict-free IP setup

    No internet slowdown

    Optional z/OS outbound internet (if enabled)



*************to chnage ips


sudo ip addr flush dev tap0
sudo ip addr add 192.168.0.250/24 dev tap0
sudo ip link set dev tap0 up



jtron@jtron-ThinkPad-T480:~$ ip addr show tap0   <==== to view if the ip can be pinged 
7: tap0: <BROADCAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000
    link/ether 9e:ed:29:27:4e:76 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::9ced:29ff:fe27:4e76/64 scope link 
       valid_lft forever preferred_lft forever                              theres no ip
***************************************************************************************
jtron@jtron-ThinkPad-T480:~$ sudo ip addr flush dev tap0                <=== flush it incase
sudo ip addr add 192.168.4.250/24 dev tap0                               <=== add it back
[sudo] password for jtron: 
jtron@jtron-ThinkPad-T480:~$ ip addr show tap0
7: tap0: <BROADCAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000
    link/ether 9e:ed:29:27:4e:76 brd ff:ff:ff:ff:ff:ff
    inet 192.168.4.250/24 scope global tap0                          <===
       valid_lft forever preferred_lft forever
jtron@jtron-ThinkPad-T480:~$ 


*****************************for IP

STEP 7: Test Ping
-----------------
From Linux:
ping 192.168.0.150
From z/OS:
PING 192.168.0.250
STEP 8: (Optional) Allow z/OS to access the internet
-----------------------------------------------------
Enable NAT and IP forwarding on Linux:
sudo sysctl -w net.ipv4.ip_forward=1
sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o enp0s31f6 -j MASQUERADE
Revert:
sudo iptables -t nat -D POSTROUTING -s 192.168.0.0/24 -o enp0s31f6 -j MASQUERADE
sudo sysctl -w net.ipv4.ip_forward=0
STEP 9: Change TAP IP (if needed)
---------------------------------
To switch IP (e.g., to 192.168.0.251):
sudo ip addr flush dev tap0
sudo ip addr add 192.168.0.251/24 dev tap0
Also update z/OS TCPIP:
HOME 192.168.0.150 ETH1
ROUTE DEFAULT 192.168.0.251 ETH1 MTU DEFAULTSIZE









************remove ip forwarding

❌ To remove the NAT rule you just added:

Run the exact same command as before, but with -D (delete) instead of -A (add):

sudo iptables -t nat -D POSTROUTING -s 192.168.4.0/24 -o wlp3s0 -j MASQUERADE

❌ To turn off IP forwarding:

sudo sysctl -w net.ipv4.ip_forward=0













************************************************


✅ Step-by-step Solution:
1. Verified TAP setup

    Confirmed tap0 had 192.168.0.250/24 and was UP on Linux.

    Confirmed z/OS had 192.168.0.150 with the gateway set to 192.168.0.250.

2. Enabled IP forwarding on Linux

sudo sysctl -w net.ipv4.ip_forward=1
echo "net.ipv4.ip_forward=1" | sudo tee -a /etc/sysctl.conf  # Make it permanent

3. Configured NAT (MASQUERADE) to allow Linux to forward z/OS traffic to the internet

    Added NAT rules on both interfaces:

sudo iptables -t nat -A POSTROUTING -o enp0s31f6 -j MASQUERADE  # Ethernet
sudo iptables -t nat -A POSTROUTING -o wlp3s0 -j MASQUERADE     # Wi-Fi

4. Handled dual default gateways

    Your Linux host had two default routes, one via Ethernet and one via Wi-Fi.

    We confirmed that Linux preferred Ethernet due to its lower routing metric.

5. Cleaned up duplicate NAT rules

    Identified redundant (0-packet) MASQUERADE rules using:

sudo iptables -t nat -L POSTROUTING --line-numbers

    Removed duplicates (from bottom up) using:

sudo iptables -t nat -D POSTROUTING [rule_number]

6. Confirmed success

    Ran ping 8.8.8.8 from z/OS and used tcpdump on Linux (tap0, wlp3s0, or enp0s31f6) to verify:

        ICMP packets were leaving z/OS

        MASQUERADE rules were being used (non-zero packet counters)

        Replies were being received ✅

🧠 Optional: Shortcuts You Can Use Going Forward
🔁 Switch to Wi-Fi for outbound traffic:

sudo ip route del default via 192.168.0.1 dev enp0s31f6

🔁 Switch back to Ethernet:

sudo ip route add default via 192.168.0.1 dev enp0s31f6

🧼 List iptables NAT rules with line numbers:

sudo iptables -t nat -L POSTROUTING --line-numbers




**********************wifi


 To set up z/OS routing via Wi-Fi (if you're not already):

    Make sure your Wi-Fi is connected.
    You can confirm with:

ip addr show wlp3s0

Ensure tap0 has IP 192.168.0.250 (your z/OS gateway).

Make sure z/OS is using 192.168.0.250 as its gateway.
You’ve already done this in TCPIP config with something like:

    GATEWAY 192.168.0.250 192.168.0.0 ETH1

✅ Add/verify MASQUERADE rule for Wi-Fi:

sudo iptables -t nat -A POSTROUTING -o wlp3s0 -j MASQUERADE

✅ If needed: Delete Ethernet default route to force Wi-Fi usage

sudo ip route del default via 192.168.0.1 dev enp0s31f6

Now, all outbound traffic (including from z/OS) will go through wlp3s0.
✅ Final Test:

From z/OS:

ping 8.8.8.8

From Linux:

sudo tcpdump -i wlp3s0 icmp

You should see ICMP requests and replies.

Let me know if you want to default to Wi-Fi every time you boot — I can help you script that or adjust metrics to make Wi-Fi preferred.
