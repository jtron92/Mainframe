✅ GOAL: Send an email from Gmail ➝ Linux ➝ z/OS
🔹 1. Enable IMAP in Gmail

    Went to Gmail Settings → Forwarding and POP/IMAP

    Confirmed IMAP is enabled so Linux can fetch Gmail messages

🔹 2. Generated a Gmail App Password (IMAP)

    Visited: https://myaccount.google.com/apppasswords

    Selected "Mail" and "Other → IMAP Script"

    Copied the 16-character app password:

    bzgaspflzimpsnpc

🔹 3. Created a Python script to:

    Log in to Gmail via IMAP

    Look for unread emails with subject: SEND TO MF

    Save the body of the email to /home/jtron/from_gmail.txt (UTF-8)

    Convert the file to EBCDIC (IBM1047) with iconv

    FTP the EBCDIC version to your z/OS system as:

    IBMUSER.FROM.EMAIL.MSG

🔹 4. Ensured iconv is available on Linux

sudo apt install libc-bin  # usually pre-installed

This allows you to convert files from UTF-8 to EBCDIC (code page 1047) like so:

iconv -f UTF-8 -t IBM1047 from_gmail.txt -o from_gmail_ebcdic.txt

🔹 5. Confirmed mainframe FTP server is active and reachable

    Your z/OS system was listening on IP 192.168.4.150

    FTP login tested with:

    User: IBMUSER
    Password: your_mf_password

🔹 6. Updated Python script to send EBCDIC version

Final working script:

    Reads email

    Saves to .txt

    Converts to EBCDIC

    Uploads to z/OS dataset

ftp.storbinary(f"STOR '{TARGET_DATASET}'", f)

🔹 7. Tested end-to-end

    Sent an email to jxcsys92@gmail.com with subject SEND TO MF

    Python script pulled it in

    Linux wrote it and FTP’d it to mainframe

    On z/OS:

    BROWSE 'IBMUSER.FROM.EMAIL.MSG'

    ✅ Confirmed clean EBCDIC-readable text!





You can also add logging to verify cron is running it:

*/1 * * * * /usr/bin/python3 /home/jtron/gmail_to_zos.py >> /home/jtron/imap_to_zos.log 2>&1

Then run:

tail -f /home/jtron/imap_to_zos.log

That’ll show you each run in real time.

Let me know if you want it to delete emails or route to different datasets based on subject line!



