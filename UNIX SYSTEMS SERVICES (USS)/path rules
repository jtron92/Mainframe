When coding the z/OS UNIX directory and name, there are several syntax rules that need to be adhered to:

Each directory and file name must be preceded by a slash (/)
There is a maximum length of 255 characters
They can contain symbolic parameters
Note that the system checks the length after any required symbolic substitution has taken place.


//SYSUT1   DD  PATH='/tmpp/pfainst.err'
//SYSPRINT DD  SYSOUT=*

When referecing an existing z/OS UNIX file name and directory, if it contains anything other than uppercase characters, it must be enclosed in single quotes

If a path name cannot fit entirely on a JCL line, it can be continued using similar methods discussed for traditional JCL statements and parameters.

so, on the initial line the path name continues until column 71. The following line contains // in columns 1 and 2, and the continued information must begin in column 16.


PATHOPTS=ORDONLY

Like traditional z/OS data set referencing, you also need to specify the disposition of the data set you are accessing. The PATHOPTS parameter can be used for this purpose.

In the case of accessing an existing z/OS UNIX file for read-only purposes, the only parameter value used should be ORDONLY, which is the default. Other values for this parameter are discussed when you look at creating z/OS UNIX files.

PATHOPTS=(OWRONLY,OCREAT),


OWRONLY will ensure that your program opens the file for writing only purposes, while ORDWR ensures that it is opened for read and write activities.
a value of OCREAT is also specified, which means that if the z/OS UNIX file name specified in the PATH parameter does not exist, it will be created. However, if the directory path does not exist, the z/OS UNIX file will not be created.



PATHOPTS=(ORDWR,OAPPEND)

Suppose you want to open an existing z/OS UNIX file and write data to the end of it, rather than overwriting its content. The OAPPEND value provides this functionality.

Several other lesser used PATHOPTS values are available, and you should consult your IBM JCL Reference manual for more details.


DD PATH='u/system/config.dat',
PATHOPTS=(OWRONLY,OCREAT,OEXCL)          WRITE-ONLY REQUIREMENT (OWRONLY) , THAT THE FILE NEEDS TO BE CREATED (OCREAT), AND IF THE FILE ALREADY EXISTS, TO FAIL THE JOB STEP (OEXCL)

PATHDISP=(KEEP,DELETE) 

The PATHDISP parameter is used to specify the action to take with the z/OS UNIX file should the job step end normally or abnormally.  The first sub-parameter when using PATHDISP instructs the system what to do with the file if the step ends normally. In most cases, KEEP will be specified, and indicates that the file will be retained. If you wanted to clean up after a job had completed successfully and remove the file, then DELETE could be coded here.

The second sub-parameter indicates the action to take if the step fails. KEEP and DELETE are valid options.

Owner
SIRUSR: Permission to read the file.
SIWUSR: Permission to write to the file.
SIXUSR: Permission to search - if the path indicates a directory, or execute a program residing in the file.
SIRWXU: Permission to read, write, and search - if the path indicates a directory, or read, write, and execute for a file.
File group class
SIRGRP: Permission for users of the group to read the file.
SIWGRP: Permission for users of the group to write to the file.
SIXGRP: Permission for users of the group to search - if the path indicates a directory, or execute a program residing in the file.
SIRWXG: Permission for users of the group to read, write, and search - if the path indicates a directory, or read, write, and execute for a file.
Other class
SIROTH: Permission for all other users to read the file.
SIWOTH: Permission for all other users to write to the file.
SIXOTH: Permission for all other users to search - if the path indicates a directory, or execute a program residing in the file.
SIRWXO: Permission for all other users to read, write, and search - if the path indicates a directory, or read, write, and execute for a file.


PATHMODE=(SIRUSR,SIWUSR,SIRGRP,SIROTH),



When creating a new z/OS UNIX file, the PATHMODE parameter can be used to assign permission attributes to it. This allows you to assign the correct access to the z/OS UNIX file.

Permissions are separated into the three following types, with a mixture of each allowed in the specification:

Tasks that can be performed by the owner of the file
Tasks that can be performed by users in the same group as the file
Tasks that can be performed by everyone else
